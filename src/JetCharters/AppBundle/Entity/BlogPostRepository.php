<?php

namespace JetCharters\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BlogPostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogPostRepository extends EntityRepository
{
    public function searchByCategorySlug($categorySlug)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('BlogPost', 'category', 'comment')
            ->from('JetChartersAppBundle:BlogPost', 'BlogPost')
            ->leftjoin('BlogPost.category', 'category')
            ->leftjoin('BlogPost.comment', 'comment')
            ->where('category.categorySlug = :categorySlug')
            ->setParameter('categorySlug', $categorySlug)
            ->andWhere('BlogPost.isPublish = :isPublish')
            ->setParameter('isPublish', 1)
            ->getQuery()->execute();
    }
    
    public function searchBlogCriteria($searchCriteria)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('BlogPost', 'category', 'comment')
            ->from('JetChartersAppBundle:BlogPost', 'BlogPost')
            ->leftjoin('BlogPost.category', 'category')
            ->leftjoin('BlogPost.comment', 'comment')
            ->where('BlogPost.isPublish = :isPublish')->setParameter('isPublish', 1)
            ->andWhere('BlogPost.postTitle like :postTitle OR BlogPost.postBody like :postBody')
            ->setParameter('postTitle', '%'.trim($searchCriteria).'%')
            ->setParameter('postBody', '%'.trim($searchCriteria).'%')
            ->getQuery()->execute();
    }
    
    public function getRecentBlog($limit = 5, $otherOptions = array())
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('BlogPost', 'category')
            ->from('JetChartersAppBundle:BlogPost', 'BlogPost')
            ->leftjoin('BlogPost.category', 'category')
            ->where('BlogPost.isPublish = :isPublish')->setParameter('isPublish', 1)
            ->orderBy('BlogPost.id', 'DESC')
            ->setMaxResults($limit)
	;
	
	if (count($otherOptions)>0) {
	    if(isset($otherOptions['blogPostId'])){
		$query->andWhere('BlogPost.id != :id')->setParameter('id', $otherOptions['blogPostId']);
	    }
	    
	}
            
	return $query->getQuery()->execute();
    }
    
    public function getPopularBlog($limit = 5)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('BlogPost', 'category')
            ->from('JetChartersAppBundle:BlogPost', 'BlogPost')
            ->leftjoin('BlogPost.category', 'category')
            ->where('BlogPost.isPublish = :isPublish')->setParameter('isPublish', 1)
            ->orderBy('BlogPost.views', 'DESC')
            ->setMaxResults($limit)
	;
	
	return $query->getQuery()->execute();
    }
    
    public function getBlogPostDetailBySlug($slug)
    {
	if ($slug!='') {
	    $query = $this->getEntityManager()->createQueryBuilder()
		->select('BlogPost', 'category', 'comment')
		->from('JetChartersAppBundle:BlogPost', 'BlogPost')
		->leftjoin('BlogPost.category', 'category')
		->leftjoin('BlogPost.comment', 'comment')
		->where('BlogPost.isPublish = :isPublish')->setParameter('isPublish', 1)
		->andWhere('BlogPost.postSlug = :postSlug')->setParameter('postSlug', $slug)
		->orderBy('BlogPost.views', 'DESC')
	    ;
	    
	    return $query->getQuery()->execute();
	}
    }
    
    public function getAllActiveBlogPost()
    {
	$query = $this->getEntityManager()->createQueryBuilder()
	    ->select('BlogPost', 'category', 'comment')
	    ->from('JetChartersAppBundle:BlogPost', 'BlogPost')
	    ->leftjoin('BlogPost.category', 'category')
	    ->leftjoin('BlogPost.comment', 'comment')
	    ->where('BlogPost.isPublish = :isPublish')->setParameter('isPublish', 1)
	;
	
	return $query->getQuery()->execute();
	
    }
    
}